// Mocks generated by Mockito 5.4.2 from annotations
// in todoappwithcleanarchitecture/test/features/todo/data/repositories/task_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todoappwithcleanarchitecture/core/failure/failure.dart' as _i6;
import 'package:todoappwithcleanarchitecture/features/todo/data/datasources/task_api.dart'
    as _i3;
import 'package:todoappwithcleanarchitecture/features/todo/domain/entities/task.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskApi extends _i1.Mock implements _i3.TaskApi {
  @override
  _i4.Stream<List<_i5.Task_>> getTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue: _i4.Stream<List<_i5.Task_>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i5.Task_>>.empty(),
      ) as _i4.Stream<List<_i5.Task_>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>> getTaskById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>>.value(
            _FakeEither_0<_i6.Failure, _i5.Task_>(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>>.value(
                _FakeEither_0<_i6.Failure, _i5.Task_>(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>> createTask(_i5.Task_? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>>.value(
            _FakeEither_0<_i6.Failure, _i5.Task_>(
          this,
          Invocation.method(
            #createTask,
            [task],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>>.value(
                _FakeEither_0<_i6.Failure, _i5.Task_>(
          this,
          Invocation.method(
            #createTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>> updateTask(_i5.Task_? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>>.value(
            _FakeEither_0<_i6.Failure, _i5.Task_>(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>>.value(
                _FakeEither_0<_i6.Failure, _i5.Task_>(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, _i5.Task_>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, void>> deleteTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.Failure, void>>.value(
            _FakeEither_0<_i6.Failure, void>(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i6.Failure, void>>.value(
                _FakeEither_0<_i6.Failure, void>(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.Failure, void>>);
}
