// Mocks generated by Mockito 5.4.2 from annotations
// in todoappwithcleanarchitecture/test/features/todo/presentation/bloc/task_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todoappwithcleanarchitecture/core/failure/failure.dart' as _i8;
import 'package:todoappwithcleanarchitecture/features/todo/domain/entities/task.dart'
    as _i6;
import 'package:todoappwithcleanarchitecture/features/todo/domain/repositories/task_repository.dart'
    as _i2;
import 'package:todoappwithcleanarchitecture/features/todo/domain/usecases/delete_task.dart'
    as _i9;
import 'package:todoappwithcleanarchitecture/features/todo/domain/usecases/update_task.dart'
    as _i7;
import 'package:todoappwithcleanarchitecture/features/todo/domain/usecases/view_all_tasks.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskRepository_0 extends _i1.SmartFake
    implements _i2.TaskRepository {
  _FakeTaskRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ViewAllTasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewAllTasks extends _i1.Mock implements _i4.ViewAllTasks {
  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);
  @override
  _i5.Stream<List<_i6.Task_>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Stream<List<_i6.Task_>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i6.Task_>>.empty(),
      ) as _i5.Stream<List<_i6.Task_>>);
}

/// A class which mocks [UpdateTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTask extends _i1.Mock implements _i7.UpdateTask {
  @override
  _i2.TaskRepository get taskRepository => (super.noSuchMethod(
        Invocation.getter(#taskRepository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#taskRepository),
        ),
        returnValueForMissingStub: _FakeTaskRepository_0(
          this,
          Invocation.getter(#taskRepository),
        ),
      ) as _i2.TaskRepository);
  @override
  set taskRepository(_i2.TaskRepository? _taskRepository) => super.noSuchMethod(
        Invocation.setter(
          #taskRepository,
          _taskRepository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.Either<_i8.Failure, _i6.Task_>> call(_i6.Task_? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i8.Failure, _i6.Task_>>.value(
            _FakeEither_1<_i8.Failure, _i6.Task_>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i8.Failure, _i6.Task_>>.value(
                _FakeEither_1<_i8.Failure, _i6.Task_>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, _i6.Task_>>);
}

/// A class which mocks [DeleteTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTask extends _i1.Mock implements _i9.DeleteTask {
  @override
  _i2.TaskRepository get taskRepository => (super.noSuchMethod(
        Invocation.getter(#taskRepository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#taskRepository),
        ),
        returnValueForMissingStub: _FakeTaskRepository_0(
          this,
          Invocation.getter(#taskRepository),
        ),
      ) as _i2.TaskRepository);
  @override
  set taskRepository(_i2.TaskRepository? _taskRepository) => super.noSuchMethod(
        Invocation.setter(
          #taskRepository,
          _taskRepository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.Either<_i8.Failure, void>> call(_i6.Task_? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i8.Failure, void>>.value(
            _FakeEither_1<_i8.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i8.Failure, void>>.value(
                _FakeEither_1<_i8.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, void>>);
}
