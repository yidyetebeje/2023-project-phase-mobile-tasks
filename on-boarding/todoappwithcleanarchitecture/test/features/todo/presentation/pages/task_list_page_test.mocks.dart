// Mocks generated by Mockito 5.4.2 from annotations
// in todoappwithcleanarchitecture/test/features/todo/presentation/pages/task_list_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:bloc/bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:todoappwithcleanarchitecture/features/todo/domain/usecases/delete_task.dart'
    as _i4;
import 'package:todoappwithcleanarchitecture/features/todo/domain/usecases/update_task.dart'
    as _i3;
import 'package:todoappwithcleanarchitecture/features/todo/domain/usecases/view_all_tasks.dart'
    as _i2;
import 'package:todoappwithcleanarchitecture/features/todo/presentation/bloc/task_bloc.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeViewAllTasks_0 extends _i1.SmartFake implements _i2.ViewAllTasks {
  _FakeViewAllTasks_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateTask_1 extends _i1.SmartFake implements _i3.UpdateTask {
  _FakeUpdateTask_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteTask_2 extends _i1.SmartFake implements _i4.DeleteTask {
  _FakeDeleteTask_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBloc extends _i1.Mock implements _i5.TaskBloc {
  @override
  _i2.ViewAllTasks get viewAllTasks => (super.noSuchMethod(
        Invocation.getter(#viewAllTasks),
        returnValue: _FakeViewAllTasks_0(
          this,
          Invocation.getter(#viewAllTasks),
        ),
        returnValueForMissingStub: _FakeViewAllTasks_0(
          this,
          Invocation.getter(#viewAllTasks),
        ),
      ) as _i2.ViewAllTasks);
  @override
  set viewAllTasks(_i2.ViewAllTasks? _viewAllTasks) => super.noSuchMethod(
        Invocation.setter(
          #viewAllTasks,
          _viewAllTasks,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.UpdateTask get updateTask => (super.noSuchMethod(
        Invocation.getter(#updateTask),
        returnValue: _FakeUpdateTask_1(
          this,
          Invocation.getter(#updateTask),
        ),
        returnValueForMissingStub: _FakeUpdateTask_1(
          this,
          Invocation.getter(#updateTask),
        ),
      ) as _i3.UpdateTask);
  @override
  set updateTask(_i3.UpdateTask? _updateTask) => super.noSuchMethod(
        Invocation.setter(
          #updateTask,
          _updateTask,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.DeleteTask get deleteTask => (super.noSuchMethod(
        Invocation.getter(#deleteTask),
        returnValue: _FakeDeleteTask_2(
          this,
          Invocation.getter(#deleteTask),
        ),
        returnValueForMissingStub: _FakeDeleteTask_2(
          this,
          Invocation.getter(#deleteTask),
        ),
      ) as _i4.DeleteTask);
  @override
  set deleteTask(_i4.DeleteTask? _deleteTask) => super.noSuchMethod(
        Invocation.setter(
          #deleteTask,
          _deleteTask,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.TaskState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i6.dummyValue<_i5.TaskState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _i6.dummyValue<_i5.TaskState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.TaskState);
  @override
  _i7.Stream<_i5.TaskState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i5.TaskState>.empty(),
        returnValueForMissingStub: _i7.Stream<_i5.TaskState>.empty(),
      ) as _i7.Stream<_i5.TaskState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i5.TaskEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i5.TaskEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i5.TaskState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i5.TaskEvent>(
    _i8.EventHandler<E, _i5.TaskState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(_i8.Transition<_i5.TaskEvent, _i5.TaskState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  void onChange(_i8.Change<_i5.TaskState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
